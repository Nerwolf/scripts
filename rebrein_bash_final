#!/bin/bash

helppp(){
echo "HELP"
echo 'Это справка по скрипту!!!'
echo 'Здравствуйте, этот скрипт работает с параметрами и служит для мониторинга ресурсов системы и не только.'
echo 'Назначение скрипта вывод информации больщого перечня системных программ и утилит'
echo 'Использование скрипта: ПАРАМЕТР [ОПЦИИ ПАРАМЕТРА].'
echo 'Для вывода информации по разным подсистемам использутся следующие параметры:'
echo 'Параметр:'
echo '     -p, --proc работа с директорией /proc'
echo '     В качестве 2 параметра можно передать имя файла'
#### CPU
echo '     #### CPU'
echo '       -c, --cpu - Вывод сведений о используемом в системе процессоре'
echo '       Опции:'
echo '           ps - Посмотреть процессы'
echo '           [1-9] Запускает vmstat с опцией'
echo '           info, Info - посмотреть др. информацию о процессоре'
echo '           np, NP - Посмотреть количество ядер процессора'
#### MEMORY
echo '     #### MEMORY'
echo '       -m, --memory - Вывод информации ОЗУ'
echo '       Без опций выводит информацию о состоянии ОЗУ'
echo '       Опции:'
echo '           total - всего доступно физической памяти на сервере'
echo '           free - свободно памяти'
echo '           available - памяти доступно к использованию'
#### DISK
echo '     #### DISK'
echo '       -d, --disks - вывод сведений о доступных в системе дисках'
echo '       Опции:'
echo '           аll, fd - полный вывод сведений'
echo '           size, Size - вывод столбца с общих размером диска'
echo '           used, Used - вывод столбца с размером данных, записанных на дисках'
echo '           avail, Avail - вывод столбца с размером доступного свободного пространства на дисках'
echo '           du - вывод размера содержимого каталога, в качестве опции указывается путь к каталогy'
#### NETWORK
echo '     #### NETWORK'
echo '       -n, --network - вывод сведений о инициализированных в системе сетевых интерфейсах'
echo '       Без опций выводит информацию о сетевых интерфейсах'
echo '       Опции:'
echo '          if - Мониторинг нагрузки сети'
echo '          g - Информацию о сетевом интерфейсе, в качестве опции принимает наименование целевого интерфейса'
echo '          В качестве параметра можно указать информацию о сетевом устройстве из списка -n, --network'
echo '          p - выполняет команду ping, в качестве опции принимает целевой узел сети'
#### LOAD
echo '     #### LOAD'
echo '       -la, --loadaverage - вывод средней нагрузки на систему'
echo '       Опции:'
echo '          w, W - w etc Посмотреть процессы'
echo '          cpu, CPU - Посмотреть процессы по загрузке процессора'
echo '          От 1 до 9 запуск vmstat с параметром'
echo '          w, W - Информация о пользователях'
echo '          free - Посмотреть на сколько загружен процессор'
echo '          all - Посмотреть  всю информацию  о загрузке процессора'
echo '          lan - Мониторинг нагрузки сети'
#### KILL
echo '     #### KILL'
echo '        -k, --kill - вызывает утилиту kill, в качестве опции принимает номер сигнала, который будет передан процессу по его идентиффикатору'
echo '        Пример --kill [PID Процесса]'
echo '       Опции:'
echo '         С опцией -k 9 или -9 передает сигнал kill - PID'
echo '         Пример --kill -9 [PID Процесса]'
#### HELP
echo '     #### HELP'
echo '       -h, --help - вывод справочной информации по назначению и синтаксису запуска скрипта. Выводится при запуске скрипта без параметров.'
#### OUT
echo '     #### OUT'
echo '        -o, --output - перенаправление потоков вывода консоли в файл'
echo '        Для корректной работы этого параметра необходимо передавать этот параметр первым параметром, в противном случае корректность вывода не гарантируется.'
#### MAIL
echo '     #### mail'
echo '       -mail Собирает статистику и сохраняет ее в фалл и отравляет на email.'
echo '       Пример -o -mail <your@mail.com>'   
#####FOR
echo ' '
echo '       -for - Запускает цикл for, нужен по условию. Цикл запускается с переменой.' 

}

output(){
  if [[ $1 = "-o" ]] || [[ $1 = "--output" ]]
     then 
      shift
    fi
}


proc(){
 if [[ $1 = "-o" ]] || [[ $1 = "--output" ]]
  then 
   shift
 fi
 if [[ $2 = "-o" ]] || [[ $2 = "--output" ]]
  then 
  ls /proc 
 fi
 if [ -z "$2" ]
  then 
   ls /proc
  elif [[ -f /proc/"$2" ]]
   then
    cat /proc/"$2" 2>&1 | $out
  else
   echo "Вы не указали файл или не верное имя файла! Для справки --help или -h" | $out 
 fi
}

memory(){
 if [[ $1 = "-o" ]] || [[ $1 = "--output" ]] 
  then 
   shift
 fi
 if [[ $2 = "-o" ]] || [[ $2 = "--output" ]] 
  then 
   free
 fi
 if [ -z "$2" ] 
 then 
  free
 else
  case "$2" in
   total) free -h | awk '/Mem:/{print $2}' ;; 
   free) free -h | awk '/Mem:/{print $4}' ;;
   available) free -h | awk '/Mem:/{print $7}';;
   *) echo "Hеверный параметр memory! Для справки --help или -h" ;;
  esac
 fi
}

network(){
 if [[ $1 = "-o" ]] || [[ $1 = "--output" ]]
  then 
   shift
 fi

 if [ -z "$2" ]
  then 
   ip a
  else
    case "$2" in                   
      if) command -v ifstat &> /dev/null && ifstat 5 5 || echo "ifstat Не устрановлен! Для установки передай переменную -i Для справки --help или -h" ;; 
      p) if [ -z "$3" ] ; then echo 'Hеверный параметр ping Для справки --help или -h'; else ping -c1 $3 &> /dev/null && ping -c5 $3 || echo "Неверный адрес! Для справки --help или -h " ;fi ;;
      g) if [ -z "$3" ] ; then echo 'Hеверный параметр ip a Для справки --help или -h'; else ip a | grep $3 ;fi ;;
      *) echo "Hеверный параметр network! Для справки --help или -h" ;;
    esac
 fi
}

disks(){
 if [[ $1 = "-o" ]] || [[ $1 = "--output" ]]
  then 
   shift
 fi
 if [[ $2 = "-o" ]] || [[ $2 = "--output" ]]
  then 
   lsblk 
 fi
 if [ -z "$2" ]
 then 
  lsblk
 else
  case "$2" in
      all|df) df -h ;;
      size|Size) df -h | awk '{print$2}' ;;
      used|Used ) df -h | awk '{print$3}' ;;
      avail|Avail) df -h | awk '{print$4}' ;;
      Summ|summ) vmstat -D ;;
      du) if ! [ -d $3 ] ; then  echo 'No directory' ; else  du -h $3 ; fi ;;
      *) echo "Hеверный параметр disks! Для справки --help или -h" ;;
  esac
 fi
}

killlll(){
   
 if [[ $1 = "-o" ]] || [[ $1 = "--output" ]] 
  then 
   shift
 fi

 if [[ $1 = "-k" ]] || [[ $1 = "--kill" ]] 
  then 
   shift
 fi
    
 if [[ $1 = "-o" ]] || [[ $1 = "--output" ]]
  then 
   shift
 fi
   
 if [ -z "$1" ]
  then 
   echo 'Не ввели парметр UID! Для справки --help или -h' && exit
 fi  
    
 if [[ "$1" == "9" ]] || [[ "$1" == "-9" ]]
  then
   if [ -z "$2" ]
    then 
     echo 'Не ввели парметр UID c KILL -9 Для справки --help или -h !' && exit
    else
     kill -9 $2 
   fi
  else
   kill $1 
 fi  
    }

proverka_cpu(){
  if [[ -f /proc/cpuinfo ]] 
  then 
   cat /proc/cpuinfo
  else
   echo "Немоу прочитать информацию о процессоре! Для справки --help или -h" && exit
  fi
}
 
 cpu(){
  if [[ $1 = "-o" ]] || [[ $1 = "--output" ]]
   then 
    shift
  fi
  if [ -z "$2" ]
   then 
    lscpu
   else
     case "$2" in
      ps|PS) ps -aux --sort -pcpu | head -5 ;;
      [0-9]) vmstat $2 $2 ;;
      info|Info) proverka_cpu ;;
      np|NP) nproc ;;
      *) echo "Hеверный параметр cpu! Для справки --help или -h" ;;
     esac
  fi
  } 

load(){ 
if [[ $1 = "-o" ]] || [[ $1 = "--output" ]]
 then 
  shift
fi
if [[ $2 = "-o" ]] || [[ $2 = "--output" ]]
  then 
   if [[ -f /proc/loadavg ]]
    then  
     cat /proc/loadavg | cut -c 1-14
    else 
     echo '/proc/loadavg НЕ СУЩЕСТВУЕТ! Для справки --help или -h'
   fi 
fi
if [ -z "$2" ]
 then 
  if [[ -f /proc/loadavg ]]
    then  
     cat /proc/loadavg | cut -c 1-14
    else 
     echo '/proc/loadavg НЕ СУЩЕСТВУЕТ! Для справки --help или -h'
   fi                                                                               
 else
  case "$2" in 
      cpu|CPU) ps -aux --sort -pcpu | head -5 ;;
      [1-9]) vmstat $2 $2 ;;
      w|W) w etc ;;
      mem|Mem|MEM) ps -aux --sort -pmem | head -5 ;;
      free) command -v sar &> /dev/null && sar 2 5 | awk '/Average:/{print$8}' || echo "sysstat Не устрановлен! Для установки передай переменную -i Для справки --help или -h" ;;
      all) command -v sar &> /dev/null && sar 2 5 || echo "sysstat Не устрановлен! Для установки передай переменную -i Для справки --help или -h" ;;
      lan) command -v ifstat &> /dev/null && ifstat 5 5 || echo "ifstat Не устрановлен! Для установки передай переменную -i Для справки --help или -h" ;; 
      *) echo "Hеверный параметр load! Для справки --help или -h" ;;
  esac
fi
}

mail (){
  
  out="tee -a history.log"
  command -v sar 1 1 &> /dev/null || echo "sysstat Не устрановлен! Для установки передай переменную -i Для справки --help или -h" 
 if ! command -v ifstat &> /dev/null ; then echo "ifstat Не устрановлен! Для установки передай переменную -i Для справки --help или -h" && exit ; fi
  df -h
 if [[ -f /proc/loadavg ]]
  then  
   cat /proc/loadavg | cut -c 1-14
  else 
   echo '/proc/loadavg НЕ СУЩЕСТВУЕТ! Для справки --help или -h'
 fi  
  CPU=`sar 2 5 | awk '/Average:/{print$8}'`
  CPU=$( printf "%.0f" $CPU )
  
 if [ "$CPU" -lt 20 ]
  then
   echo "$CPU ВСЕ ПЛОХО C CPU !!!" #| sendmail $3
  else
   echo "ook C CPU !!! $CPU"
 fi
  
  OZY=`free -h | awk '/Mem:/{print $4}' | cut -c 1-3`
  OZY=$( printf "%.0f" $OZY )
  
 if [ "$OZY" -lt 200 ]
  then
   echo "$OZY ВСЕ ПЛОХО C OZY!!!"  #| sendmail $3
  else
   echo "ook C OZY!!! $OZY"
 fi
  echo 'Отправка history.log на email Файл во вложении | mail -s -a ./history.log -r' "$3"
}

test(){
 command -v stress &> /dev/null || echo "stress Не устрановлен! Для установки передай переменную -i Для справки --help или -h"
if [[ $1 = "-o" ]] || [[ $1 = "--output" ]]
 then 
  shift
fi

if [ -z "$2" ]
 then 
  stress --cpu 1
 else
  stress --cpu $2
fi
  }

install (){
  #apt update || exit 
  apt install ifstat -y || exit 
  apt install sysstat -y || exit 
  apt install stress -y || exit 
}

xz(){
 if [[ $1 = "-o" ]] || [[ $1 = "--output" ]]
 then 
  shift
 fi
  if [[ $1 = "-for" ]] 
 then 
  shift
 fi
 if [ -z "$1" ]
  then
   echo "НЕТ ЗГАЧЕНИЯ ДЛЯ ЦИКЛА Для справки --help или -h" && exit 
 fi 
  for ((i = 0 ; i <= $1 ; i++)); do
   echo "Counter: $i"
  done
}


out="head -n 100"
# Нача скрипта 

if [ -z "$1" ] # Проверка первого оргумента 
 then
  helppp
fi
#####
for proverka in "$@" ; do # Проверка -o и присвоение переменной tee
if [[ $proverka = "-o" ]] || [[ $proverka = "--output" ]]
 then 
  out="tee -a history.log"
fi
done
#########

for proverka in "$@" ; do # Запуск скрипта 
 if [[ "$proverka" =~ ^[[\-]+ ]]
  then
   case $proverka in
     -p|--proc) PRO=yes ;;
     -m|--memory) MEM=yes ;;
     -n|--network) NET=yes ;;
     -d|--disks) DIS=yes ;;
     -k|--kill) KIL=yes;; 
     -c|--cpu) CPU=yes ;;
     -la|--loadaverage) LOA=yes ;;
     -o|--output) OUT=yes  ;;
     -h|--help) HEL=yes ;;    
     -t|--test) TES=yes ;;
     9|-9) ;;
     -mail) MAI=yes ;;
     -for) XZ=yes ;;
     -i|--inst) install ;;
     *) echo 'Неверный параметр Для справки --help или -h' ;; 
    esac   
 fi
done
# Проверка условий 
[ "$PRO" == yes ] && proc $1 $2 $3 
[ "$MEM" == yes ] && memory $1 $2 $3 2>&1 | $out
[ "$NET" == yes ] && network $1 $2 $3 $4 2>&1 | $out
[ "$DIS" == yes ] && disks $1 $2 $3 $4 2>&1 | $out
[ "$KIL" == yes ] && killlll $1 $2 $3 $4 2>&1 | $out
[ "$CPU" == yes ] && cpu $1 $2 $3 $4 2>&1 | $out
[ "$LOA" == yes ] && load $1 $2 $3 $4 2>&1 | $out
[ "$OUT" == yes ] && echo 'Включено сохранение в файл' 2>&1 | $out
[ "$HEL" == yes ] && helppp 
[ "$TES" == yes ] && test $1 $2 $3 $4
[ "$MAI" == yes ] && mail $1 $2 $3 2>&1 | $out
[ "$XZ" == yes ] && xz $1 $2 $3
